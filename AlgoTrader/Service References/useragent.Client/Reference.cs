//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlgoTrader.useragent.Client {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="tradeTypes", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    public enum tradeTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Buy = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sell = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="responseCodes", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    public enum responseCodes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Accept = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Reject = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pending = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlertMessage", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    [System.SerializableAttribute()]
    public partial class AlertMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlertIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResponseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<AlgoTrader.useragent.Client.responseCodes> ResponseCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SentToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlgoTrader.useragent.Client.tradeTypes TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlertId {
            get {
                return this.AlertIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AlertIdField, value) != true)) {
                    this.AlertIdField = value;
                    this.RaisePropertyChanged("AlertId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Response {
            get {
                return this.ResponseField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponseField, value) != true)) {
                    this.ResponseField = value;
                    this.RaisePropertyChanged("Response");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<AlgoTrader.useragent.Client.responseCodes> ResponseCode {
            get {
                return this.ResponseCodeField;
            }
            set {
                if ((this.ResponseCodeField.Equals(value) != true)) {
                    this.ResponseCodeField = value;
                    this.RaisePropertyChanged("ResponseCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SentTo {
            get {
                return this.SentToField;
            }
            set {
                if ((object.ReferenceEquals(this.SentToField, value) != true)) {
                    this.SentToField = value;
                    this.RaisePropertyChanged("SentTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SymbolName {
            get {
                return this.SymbolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolNameField, value) != true)) {
                    this.SymbolNameField = value;
                    this.RaisePropertyChanged("SymbolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlgoTrader.useragent.Client.tradeTypes Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="useragent.Client.IUserAgent")]
    public interface IUserAgent {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserAgent/generateAlert")]
        void generateAlert(string symbolName, AlgoTrader.useragent.Client.tradeTypes type, int quantity, double price);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserAgent/generateAlert")]
        System.Threading.Tasks.Task generateAlertAsync(string symbolName, AlgoTrader.useragent.Client.tradeTypes type, int quantity, double price);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserAgent/processAlertResponse")]
        void processAlertResponse(string alertID, AlgoTrader.useragent.Client.responseCodes alertResponseCode, string alertResponse);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserAgent/processAlertResponse")]
        System.Threading.Tasks.Task processAlertResponseAsync(string alertID, AlgoTrader.useragent.Client.responseCodes alertResponseCode, string alertResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAgent/getPendingAlerts", ReplyAction="http://tempuri.org/IUserAgent/getPendingAlertsResponse")]
        AlgoTrader.useragent.Client.AlertMessage[] getPendingAlerts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAgent/getPendingAlerts", ReplyAction="http://tempuri.org/IUserAgent/getPendingAlertsResponse")]
        System.Threading.Tasks.Task<AlgoTrader.useragent.Client.AlertMessage[]> getPendingAlertsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserAgentChannel : AlgoTrader.useragent.Client.IUserAgent, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserAgentClient : System.ServiceModel.ClientBase<AlgoTrader.useragent.Client.IUserAgent>, AlgoTrader.useragent.Client.IUserAgent {
        
        public UserAgentClient() {
        }
        
        public UserAgentClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserAgentClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserAgentClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserAgentClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void generateAlert(string symbolName, AlgoTrader.useragent.Client.tradeTypes type, int quantity, double price) {
            base.Channel.generateAlert(symbolName, type, quantity, price);
        }
        
        public System.Threading.Tasks.Task generateAlertAsync(string symbolName, AlgoTrader.useragent.Client.tradeTypes type, int quantity, double price) {
            return base.Channel.generateAlertAsync(symbolName, type, quantity, price);
        }
        
        public void processAlertResponse(string alertID, AlgoTrader.useragent.Client.responseCodes alertResponseCode, string alertResponse) {
            base.Channel.processAlertResponse(alertID, alertResponseCode, alertResponse);
        }
        
        public System.Threading.Tasks.Task processAlertResponseAsync(string alertID, AlgoTrader.useragent.Client.responseCodes alertResponseCode, string alertResponse) {
            return base.Channel.processAlertResponseAsync(alertID, alertResponseCode, alertResponse);
        }
        
        public AlgoTrader.useragent.Client.AlertMessage[] getPendingAlerts() {
            return base.Channel.getPendingAlerts();
        }
        
        public System.Threading.Tasks.Task<AlgoTrader.useragent.Client.AlertMessage[]> getPendingAlertsAsync() {
            return base.Channel.getPendingAlertsAsync();
        }
    }
}
