//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlgoTraderSite.Strategy.Client {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuoteMessage", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    [System.SerializableAttribute()]
    public partial class QuoteMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuoteIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuoteId {
            get {
                return this.QuoteIdField;
            }
            set {
                if ((this.QuoteIdField.Equals(value) != true)) {
                    this.QuoteIdField = value;
                    this.RaisePropertyChanged("QuoteId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SymbolName {
            get {
                return this.SymbolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolNameField, value) != true)) {
                    this.SymbolNameField = value;
                    this.RaisePropertyChanged("SymbolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime timestamp {
            get {
                return this.timestampField;
            }
            set {
                if ((this.timestampField.Equals(value) != true)) {
                    this.timestampField = value;
                    this.RaisePropertyChanged("timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StrategySummary", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    [System.SerializableAttribute()]
    public partial class StrategySummary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime AsOfField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlgoTraderSite.Strategy.Client.StrategySignal CurrentSignalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime AsOf {
            get {
                return this.AsOfField;
            }
            set {
                if ((this.AsOfField.Equals(value) != true)) {
                    this.AsOfField = value;
                    this.RaisePropertyChanged("AsOf");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlgoTraderSite.Strategy.Client.StrategySignal CurrentSignal {
            get {
                return this.CurrentSignalField;
            }
            set {
                if ((this.CurrentSignalField.Equals(value) != true)) {
                    this.CurrentSignalField = value;
                    this.RaisePropertyChanged("CurrentSignal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SymbolName {
            get {
                return this.SymbolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolNameField, value) != true)) {
                    this.SymbolNameField = value;
                    this.RaisePropertyChanged("SymbolName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StrategySignal", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    public enum StrategySignal : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Buy = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sell = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StrategyDetail", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    [System.SerializableAttribute()]
    public partial class StrategyDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<System.DateTime, double> History_Series_1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<System.DateTime, double> History_Series_2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<System.DateTime, double> History_Series_3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Metric_1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Metric_1_LabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Metric_2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Metric_2_LabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Metric_3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Metric_3_LabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<System.DateTime, double> History_Series_1 {
            get {
                return this.History_Series_1Field;
            }
            set {
                if ((object.ReferenceEquals(this.History_Series_1Field, value) != true)) {
                    this.History_Series_1Field = value;
                    this.RaisePropertyChanged("History_Series_1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<System.DateTime, double> History_Series_2 {
            get {
                return this.History_Series_2Field;
            }
            set {
                if ((object.ReferenceEquals(this.History_Series_2Field, value) != true)) {
                    this.History_Series_2Field = value;
                    this.RaisePropertyChanged("History_Series_2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<System.DateTime, double> History_Series_3 {
            get {
                return this.History_Series_3Field;
            }
            set {
                if ((object.ReferenceEquals(this.History_Series_3Field, value) != true)) {
                    this.History_Series_3Field = value;
                    this.RaisePropertyChanged("History_Series_3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Metric_1 {
            get {
                return this.Metric_1Field;
            }
            set {
                if ((this.Metric_1Field.Equals(value) != true)) {
                    this.Metric_1Field = value;
                    this.RaisePropertyChanged("Metric_1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Metric_1_Label {
            get {
                return this.Metric_1_LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.Metric_1_LabelField, value) != true)) {
                    this.Metric_1_LabelField = value;
                    this.RaisePropertyChanged("Metric_1_Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Metric_2 {
            get {
                return this.Metric_2Field;
            }
            set {
                if ((this.Metric_2Field.Equals(value) != true)) {
                    this.Metric_2Field = value;
                    this.RaisePropertyChanged("Metric_2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Metric_2_Label {
            get {
                return this.Metric_2_LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.Metric_2_LabelField, value) != true)) {
                    this.Metric_2_LabelField = value;
                    this.RaisePropertyChanged("Metric_2_Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Metric_3 {
            get {
                return this.Metric_3Field;
            }
            set {
                if ((this.Metric_3Field.Equals(value) != true)) {
                    this.Metric_3Field = value;
                    this.RaisePropertyChanged("Metric_3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Metric_3_Label {
            get {
                return this.Metric_3_LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.Metric_3_LabelField, value) != true)) {
                    this.Metric_3_LabelField = value;
                    this.RaisePropertyChanged("Metric_3_Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SymbolName {
            get {
                return this.SymbolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolNameField, value) != true)) {
                    this.SymbolNameField = value;
                    this.RaisePropertyChanged("SymbolName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Strategy.Client.IStrategy")]
    public interface IStrategy {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStrategy/NewQuote")]
        void NewQuote(AlgoTraderSite.Strategy.Client.QuoteMessage quote);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStrategy/NewQuote")]
        System.Threading.Tasks.Task NewQuoteAsync(AlgoTraderSite.Strategy.Client.QuoteMessage quote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStrategy/startWatching", ReplyAction="http://tempuri.org/IStrategy/startWatchingResponse")]
        bool startWatching(string symbolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStrategy/startWatching", ReplyAction="http://tempuri.org/IStrategy/startWatchingResponse")]
        System.Threading.Tasks.Task<bool> startWatchingAsync(string symbolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStrategy/stopWatching", ReplyAction="http://tempuri.org/IStrategy/stopWatchingResponse")]
        bool stopWatching(string symbolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStrategy/stopWatching", ReplyAction="http://tempuri.org/IStrategy/stopWatchingResponse")]
        System.Threading.Tasks.Task<bool> stopWatchingAsync(string symbolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStrategy/getSummary", ReplyAction="http://tempuri.org/IStrategy/getSummaryResponse")]
        AlgoTraderSite.Strategy.Client.StrategySummary getSummary(string symbolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStrategy/getSummary", ReplyAction="http://tempuri.org/IStrategy/getSummaryResponse")]
        System.Threading.Tasks.Task<AlgoTraderSite.Strategy.Client.StrategySummary> getSummaryAsync(string symbolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStrategy/getDetailedAnalysis", ReplyAction="http://tempuri.org/IStrategy/getDetailedAnalysisResponse")]
        AlgoTraderSite.Strategy.Client.StrategyDetail getDetailedAnalysis(string symbolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStrategy/getDetailedAnalysis", ReplyAction="http://tempuri.org/IStrategy/getDetailedAnalysisResponse")]
        System.Threading.Tasks.Task<AlgoTraderSite.Strategy.Client.StrategyDetail> getDetailedAnalysisAsync(string symbolName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStrategyChannel : AlgoTraderSite.Strategy.Client.IStrategy, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StrategyClient : System.ServiceModel.ClientBase<AlgoTraderSite.Strategy.Client.IStrategy>, AlgoTraderSite.Strategy.Client.IStrategy {
        
        public StrategyClient() {
        }
        
        public StrategyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StrategyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StrategyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StrategyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void NewQuote(AlgoTraderSite.Strategy.Client.QuoteMessage quote) {
            base.Channel.NewQuote(quote);
        }
        
        public System.Threading.Tasks.Task NewQuoteAsync(AlgoTraderSite.Strategy.Client.QuoteMessage quote) {
            return base.Channel.NewQuoteAsync(quote);
        }
        
        public bool startWatching(string symbolName) {
            return base.Channel.startWatching(symbolName);
        }
        
        public System.Threading.Tasks.Task<bool> startWatchingAsync(string symbolName) {
            return base.Channel.startWatchingAsync(symbolName);
        }
        
        public bool stopWatching(string symbolName) {
            return base.Channel.stopWatching(symbolName);
        }
        
        public System.Threading.Tasks.Task<bool> stopWatchingAsync(string symbolName) {
            return base.Channel.stopWatchingAsync(symbolName);
        }
        
        public AlgoTraderSite.Strategy.Client.StrategySummary getSummary(string symbolName) {
            return base.Channel.getSummary(symbolName);
        }
        
        public System.Threading.Tasks.Task<AlgoTraderSite.Strategy.Client.StrategySummary> getSummaryAsync(string symbolName) {
            return base.Channel.getSummaryAsync(symbolName);
        }
        
        public AlgoTraderSite.Strategy.Client.StrategyDetail getDetailedAnalysis(string symbolName) {
            return base.Channel.getDetailedAnalysis(symbolName);
        }
        
        public System.Threading.Tasks.Task<AlgoTraderSite.Strategy.Client.StrategyDetail> getDetailedAnalysisAsync(string symbolName) {
            return base.Channel.getDetailedAnalysisAsync(symbolName);
        }
    }
}
