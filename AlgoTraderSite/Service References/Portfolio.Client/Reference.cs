//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlgoTraderSite.Portfolio.Client {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PositionMessage", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.portfolio")]
    [System.SerializableAttribute()]
    public partial class PositionMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BasisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlgoTraderSite.Portfolio.Client.positionStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlgoTraderSite.Portfolio.Client.TradeMessage[] TradesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Basis {
            get {
                return this.BasisField;
            }
            set {
                if ((this.BasisField.Equals(value) != true)) {
                    this.BasisField = value;
                    this.RaisePropertyChanged("Basis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlgoTraderSite.Portfolio.Client.positionStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SymbolName {
            get {
                return this.SymbolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolNameField, value) != true)) {
                    this.SymbolNameField = value;
                    this.RaisePropertyChanged("SymbolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlgoTraderSite.Portfolio.Client.TradeMessage[] Trades {
            get {
                return this.TradesField;
            }
            set {
                if ((object.ReferenceEquals(this.TradesField, value) != true)) {
                    this.TradesField = value;
                    this.RaisePropertyChanged("Trades");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="positionStatus", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    public enum positionStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Open = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Closed = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TradeMessage", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.portfolio")]
    [System.SerializableAttribute()]
    public partial class TradeMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> InitialQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PaidCommissionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RelatedTradeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlgoTraderSite.Portfolio.Client.tradeStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TradeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransactionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlgoTraderSite.Portfolio.Client.tradeTypes TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> InitialQuantity {
            get {
                return this.InitialQuantityField;
            }
            set {
                if ((this.InitialQuantityField.Equals(value) != true)) {
                    this.InitialQuantityField = value;
                    this.RaisePropertyChanged("InitialQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PaidCommission {
            get {
                return this.PaidCommissionField;
            }
            set {
                if ((this.PaidCommissionField.Equals(value) != true)) {
                    this.PaidCommissionField = value;
                    this.RaisePropertyChanged("PaidCommission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RelatedTradeId {
            get {
                return this.RelatedTradeIdField;
            }
            set {
                if ((this.RelatedTradeIdField.Equals(value) != true)) {
                    this.RelatedTradeIdField = value;
                    this.RaisePropertyChanged("RelatedTradeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlgoTraderSite.Portfolio.Client.tradeStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SymbolName {
            get {
                return this.SymbolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolNameField, value) != true)) {
                    this.SymbolNameField = value;
                    this.RaisePropertyChanged("SymbolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TradeId {
            get {
                return this.TradeIdField;
            }
            set {
                if ((this.TradeIdField.Equals(value) != true)) {
                    this.TradeIdField = value;
                    this.RaisePropertyChanged("TradeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransactionId {
            get {
                return this.TransactionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionIdField, value) != true)) {
                    this.TransactionIdField = value;
                    this.RaisePropertyChanged("TransactionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlgoTraderSite.Portfolio.Client.tradeTypes Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="tradeStatus", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    public enum tradeStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Closed = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="tradeTypes", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    public enum tradeTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Buy = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sell = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArgumentExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    [System.SerializableAttribute()]
    public partial class ArgumentExceptionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaultMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParameterNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FaultMessage {
            get {
                return this.FaultMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultMessageField, value) != true)) {
                    this.FaultMessageField = value;
                    this.RaisePropertyChanged("FaultMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterName {
            get {
                return this.ParameterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterNameField, value) != true)) {
                    this.ParameterNameField = value;
                    this.RaisePropertyChanged("ParameterName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InsufficientQuantityFault", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    [System.SerializableAttribute()]
    public partial class InsufficientQuantityFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AvailableQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaultMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RequestedQuantityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AvailableQuantity {
            get {
                return this.AvailableQuantityField;
            }
            set {
                if ((this.AvailableQuantityField.Equals(value) != true)) {
                    this.AvailableQuantityField = value;
                    this.RaisePropertyChanged("AvailableQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FaultMessage {
            get {
                return this.FaultMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultMessageField, value) != true)) {
                    this.FaultMessageField = value;
                    this.RaisePropertyChanged("FaultMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RequestedQuantity {
            get {
                return this.RequestedQuantityField;
            }
            set {
                if ((this.RequestedQuantityField.Equals(value) != true)) {
                    this.RequestedQuantityField = value;
                    this.RaisePropertyChanged("RequestedQuantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AllocationViolationFault", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    [System.SerializableAttribute()]
    public partial class AllocationViolationFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaultMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FaultMessage {
            get {
                return this.FaultMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultMessageField, value) != true)) {
                    this.FaultMessageField = value;
                    this.RaisePropertyChanged("FaultMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InsufficientFundsFault", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
    [System.SerializableAttribute()]
    public partial class InsufficientFundsFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AvailableAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaultMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TransactionAmountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AvailableAmount {
            get {
                return this.AvailableAmountField;
            }
            set {
                if ((this.AvailableAmountField.Equals(value) != true)) {
                    this.AvailableAmountField = value;
                    this.RaisePropertyChanged("AvailableAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FaultMessage {
            get {
                return this.FaultMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultMessageField, value) != true)) {
                    this.FaultMessageField = value;
                    this.RaisePropertyChanged("FaultMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TransactionAmount {
            get {
                return this.TransactionAmountField;
            }
            set {
                if ((this.TransactionAmountField.Equals(value) != true)) {
                    this.TransactionAmountField = value;
                    this.RaisePropertyChanged("TransactionAmount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Portfolio.Client.IPortfolioManager")]
    public interface IPortfolioManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioManager/GetOpenPositions", ReplyAction="http://tempuri.org/IPortfolioManager/GetOpenPositionsResponse")]
        AlgoTraderSite.Portfolio.Client.PositionMessage[] GetOpenPositions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioManager/GetOpenPositions", ReplyAction="http://tempuri.org/IPortfolioManager/GetOpenPositionsResponse")]
        System.Threading.Tasks.Task<AlgoTraderSite.Portfolio.Client.PositionMessage[]> GetOpenPositionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioManager/GetPosition", ReplyAction="http://tempuri.org/IPortfolioManager/GetPositionResponse")]
        AlgoTraderSite.Portfolio.Client.PositionMessage GetPosition(string SymbolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioManager/GetPosition", ReplyAction="http://tempuri.org/IPortfolioManager/GetPositionResponse")]
        System.Threading.Tasks.Task<AlgoTraderSite.Portfolio.Client.PositionMessage> GetPositionAsync(string SymbolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioManager/sell", ReplyAction="http://tempuri.org/IPortfolioManager/sellResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(AlgoTraderSite.Portfolio.Client.ArgumentExceptionFault), Action="http://tempuri.org/IPortfolioManager/sellArgumentExceptionFaultFault", Name="ArgumentExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
        [System.ServiceModel.FaultContractAttribute(typeof(AlgoTraderSite.Portfolio.Client.InsufficientQuantityFault), Action="http://tempuri.org/IPortfolioManager/sellInsufficientQuantityFaultFault", Name="InsufficientQuantityFault", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
        void sell(string symbolName, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioManager/sell", ReplyAction="http://tempuri.org/IPortfolioManager/sellResponse")]
        System.Threading.Tasks.Task sellAsync(string symbolName, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioManager/buy", ReplyAction="http://tempuri.org/IPortfolioManager/buyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(AlgoTraderSite.Portfolio.Client.AllocationViolationFault), Action="http://tempuri.org/IPortfolioManager/buyAllocationViolationFaultFault", Name="AllocationViolationFault", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
        [System.ServiceModel.FaultContractAttribute(typeof(AlgoTraderSite.Portfolio.Client.InsufficientFundsFault), Action="http://tempuri.org/IPortfolioManager/buyInsufficientFundsFaultFault", Name="InsufficientFundsFault", Namespace="http://schemas.datacontract.org/2004/07/AlgoTrader.Interfaces")]
        void buy(string symbolName, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioManager/buy", ReplyAction="http://tempuri.org/IPortfolioManager/buyResponse")]
        System.Threading.Tasks.Task buyAsync(string symbolName, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioManager/getAvailableCash", ReplyAction="http://tempuri.org/IPortfolioManager/getAvailableCashResponse")]
        double getAvailableCash();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioManager/getAvailableCash", ReplyAction="http://tempuri.org/IPortfolioManager/getAvailableCashResponse")]
        System.Threading.Tasks.Task<double> getAvailableCashAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPortfolioManagerChannel : AlgoTraderSite.Portfolio.Client.IPortfolioManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PortfolioManagerClient : System.ServiceModel.ClientBase<AlgoTraderSite.Portfolio.Client.IPortfolioManager>, AlgoTraderSite.Portfolio.Client.IPortfolioManager {
        
        public PortfolioManagerClient() {
        }
        
        public PortfolioManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PortfolioManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PortfolioManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PortfolioManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AlgoTraderSite.Portfolio.Client.PositionMessage[] GetOpenPositions() {
            return base.Channel.GetOpenPositions();
        }
        
        public System.Threading.Tasks.Task<AlgoTraderSite.Portfolio.Client.PositionMessage[]> GetOpenPositionsAsync() {
            return base.Channel.GetOpenPositionsAsync();
        }
        
        public AlgoTraderSite.Portfolio.Client.PositionMessage GetPosition(string SymbolName) {
            return base.Channel.GetPosition(SymbolName);
        }
        
        public System.Threading.Tasks.Task<AlgoTraderSite.Portfolio.Client.PositionMessage> GetPositionAsync(string SymbolName) {
            return base.Channel.GetPositionAsync(SymbolName);
        }
        
        public void sell(string symbolName, int quantity) {
            base.Channel.sell(symbolName, quantity);
        }
        
        public System.Threading.Tasks.Task sellAsync(string symbolName, int quantity) {
            return base.Channel.sellAsync(symbolName, quantity);
        }
        
        public void buy(string symbolName, int quantity) {
            base.Channel.buy(symbolName, quantity);
        }
        
        public System.Threading.Tasks.Task buyAsync(string symbolName, int quantity) {
            return base.Channel.buyAsync(symbolName, quantity);
        }
        
        public double getAvailableCash() {
            return base.Channel.getAvailableCash();
        }
        
        public System.Threading.Tasks.Task<double> getAvailableCashAsync() {
            return base.Channel.getAvailableCashAsync();
        }
    }
}
